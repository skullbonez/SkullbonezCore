/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																		  THE SKULLBONEZ CORE
																				_______
																			 .-"       "-.
																			/             \
																		   /               \
																		   ¦   .--. .--.   ¦
																		   ¦ )/   ¦ ¦   \( ¦
																		   ¦/ \__/   \__/ \¦
																		   /      /^\      \
																		   \__    '='    __/
								   											 ¦\         /¦
																			 ¦\'"VUUUV"'/¦
																			 \ `"""""""` /
																			  `-._____.-'

																		 www.simoneschbach.com
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/



/* -- INCLUDE GUARDS ----------------------------------------------------------------------------------------------------------------------------------------------------*/
#ifndef SKULLBONEZ_GEOMETRIC_STRUCTURES_H
#define SKULLBONEZ_GEOMETRIC_STRUCTURES_H



/* -- INCLUDES ----------------------------------------------------------------------------------------------------------------------------------------------------------*/
#include "SkullbonezVector3.h"



/* -- USING CLAUSES -----------------------------------------------------------------------------------------------------------------------------------------------------*/
using namespace SkullbonezCore::Math::Vector;



namespace SkullbonezCore
{
	namespace Geometry
	{
		/* -- Terrain Post -----------------------------------------------------------------------------------------------------------------------------------------------

			Contains 2 x 3d vectors, one for the position, and one for the normal at that position.
		-----------------------------------------------------------------------------------------------------------------------------------------------------------------*/
		struct TerrainPost
		{
			Vector3 vPosition, vNormal;
		};


		/* -- Triangle ---------------------------------------------------------------------------------------------------------------------------------------------------

			Contains 3 x 3d vectors, one for each vertex of a triangle in 3d space.
		-----------------------------------------------------------------------------------------------------------------------------------------------------------------*/
		struct Triangle
		{
			Vector3 v1, v2, v3;
		};


		/* -- Plane ------------------------------------------------------------------------------------------------------------------------------------------------------

			Contains a vector which is the normal to the front side of the plane
			and a scalar distance to represent displacement from the origin.
		-----------------------------------------------------------------------------------------------------------------------------------------------------------------*/
		struct Plane
		{
			Vector3 normal;
			float	distance;

			Plane& operator= (Plane plane)
			{
				this->normal   = plane.normal;
				this->distance = plane.distance;

				return *this;
			}
		};


		/* -- XZ Bounds --------------------------------------------------------------------------------------------------------------------------------------------------

			Contains four scalars representing the boundaries of a XZ plane
		-----------------------------------------------------------------------------------------------------------------------------------------------------------------*/
		struct XZBounds
		{
			float xMin, xMax, zMin, zMax;

			XZBounds& operator= (XZBounds bounds)
			{
				this->xMin = bounds.xMin;
				this->xMax = bounds.xMax;
				this->zMin = bounds.zMin;
				this->zMax = bounds.zMax;

				return *this;
			}
		};


		/* -- Box --------------------------------------------------------------------------------------------------------------------------------------------------------

			A simple box structure - six integer scalars
		-----------------------------------------------------------------------------------------------------------------------------------------------------------------*/
		struct Box
		{
			int xMin, xMax, yMin, yMax, zMin, zMax;
		};



		/* -- XZ Coords --------------------------------------------------------------------------------------------------------------------------------------------------

			A structure to store X and Z coordinates, independent of the Y axis.
		-----------------------------------------------------------------------------------------------------------------------------------------------------------------*/
		struct XZCoords
		{
			float x, z;
		};



		/* -- Ray --------------------------------------------------------------------------------------------------------------------------------------------------------

			A generic ray to represent a directed displacement.
		-----------------------------------------------------------------------------------------------------------------------------------------------------------------*/
		class Ray
		{
		public:
			Vector3			origin;
			Vector3			vector3;

			Ray(void) {}
			Ray(const Vector3& vOrigin, const Vector3& vVector3) : origin(vOrigin), vector3(vVector3) {}
			~Ray(void) {}

			Ray operator*   (float f) { return Ray(origin * f, vector3 * f); }
			Ray& operator*= (float f) { *this = *this * f;  return *this; }
		};
	}
}

#endif /*----------------------------------------------------------------------------------------------------------------------------------------------------------------*/